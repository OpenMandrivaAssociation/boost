Index: boost/random/detail/integer_log2.hpp
===================================================================
--- boost/random/detail/integer_log2.hpp
+++ boost/random/detail/integer_log2.hpp	2012-12-19 22:47:06.840170611 +0100
@@ -27,7 +27,7 @@
 #elif defined(BOOST_MSVC)
 #define BOOST_RANDOM_DETAIL_CONSTEXPR __forceinline
 #elif defined(__GNUC__) && __GNUC__ >= 4
-#define BOOST_RANDOM_DETAIL_CONSTEXPR inline __attribute__((const)) __attribute__((always_inline))
+#define BOOST_RANDOM_DETAIL_CONSTEXPR inline __attribute__((__const__)) __attribute__((__always_inline__))
 #else
 #define BOOST_RANDOM_DETAIL_CONSTEXPR inline
 #endif
Index: boost/optional/optional.hpp
===================================================================
--- boost/optional/optional.hpp
+++ boost/optional/optional.hpp	2012-12-19 22:45:59.330989045 +0100
@@ -127,7 +127,7 @@
     union
     // This works around GCC warnings about breaking strict aliasing rules when casting storage address to T*
 #if defined(BOOST_OPTIONAL_DETAIL_USE_ATTRIBUTE_MAY_ALIAS)
-    __attribute__((may_alias))
+    __attribute__((__may_alias__))
 #endif
     dummy_u
     {
Index: boost/gil/gil_config.hpp
===================================================================
--- boost/gil/gil_config.hpp
+++ boost/gil/gil_config.hpp	2012-12-19 22:44:36.447990911 +0100
@@ -32,7 +32,7 @@
 #if   defined(_MSC_VER)
 #    define GIL_FORCEINLINE __forceinline
 #elif defined(__GNUC__) && __GNUC__ > 3
-#    define GIL_FORCEINLINE inline __attribute__ ((always_inline))
+#    define GIL_FORCEINLINE inline __attribute__ ((__always_inline__))
 #else
 #    define GIL_FORCEINLINE inline
 #endif
Index: boost/config/compiler/gcc.hpp
===================================================================
--- boost/config/compiler/gcc.hpp
+++ boost/config/compiler/gcc.hpp	2012-12-19 22:43:59.054442767 +0100
@@ -120,13 +120,13 @@
      // _WIN32 or one of its variant spellings. Note that Cygwin is a POSIX environment,
      // so does not define _WIN32 or its variants.
 #    define BOOST_HAS_DECLSPEC
-#    define BOOST_SYMBOL_EXPORT __attribute__((dllexport))
-#    define BOOST_SYMBOL_IMPORT __attribute__((dllimport))
+#    define BOOST_SYMBOL_EXPORT __attribute__((__dllexport__))
+#    define BOOST_SYMBOL_IMPORT __attribute__((__dllimport__))
 #  else
-#    define BOOST_SYMBOL_EXPORT __attribute__((visibility("default")))
+#    define BOOST_SYMBOL_EXPORT __attribute__((__visibility__("default")))
 #    define BOOST_SYMBOL_IMPORT
 #  endif
-#  define BOOST_SYMBOL_VISIBLE __attribute__((visibility("default")))
+#  define BOOST_SYMBOL_VISIBLE __attribute__((__visibility__("default")))
 #else
 // config/platform/win32.hpp will define BOOST_SYMBOL_EXPORT, etc., unless already defined  
 #  define BOOST_SYMBOL_EXPORT
